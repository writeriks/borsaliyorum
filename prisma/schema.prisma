generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SecurityRole {
  ADMIN
  USER
}

model User {
  userId              String   @id @default(uuid()) @db.Uuid
  firebaseUserId      String   @unique
  username            String   @unique
  displayName         String
  email               String   @unique
  birthday            Int?
  profilePhoto        String?
  coverPhoto          String?
  bio                 String?
  theme               String?
  website             String?
  createdAt           Float
  updatedAt           Float?
  premiumEndDate      Int?
  isEmailVerified     Boolean
  lastReloadDate      Float?
  postsCount          Int       @default(0)
  userFollowingCount  Int       @default(0)
  userFollowersCount  Int       @default(0)
  stockFollowingCount Int       @default(0)
  securityRole        SecurityRole @default(USER)

  // Relation to Post
  posts               Post[]   @relation("UserPosts")

  @@index([email])
  @@index([username])
}

model Post {
  postId              String    @id @default(uuid()) @db.Uuid
  userId              String    @db.Uuid
  stockTickers        String[]  // Array of stock tickers; if no tickers, this should be an empty array
  likeCount           Int?      // Optional field
  commentCount        Int?      // Optional field
  repostCount         Int?      // Optional field
  media               String    // Assuming MediaData is stored as a string (e.g., JSON or URL)
  content             String
  createdAt           Int       // Stored as a UNIX timestamp
  updatedAt           Int?      // Optional field, UNIX timestamp
  isPositiveSentiment Boolean

  // Foreign Key Relation
  user                User      @relation("UserPosts", fields: [userId], references: [userId])

  // Many-to-Many Relation with Stock
  stocks              Stock[]   @relation("StockPosts")

  @@index([userId])
}

model Stock {
  stockId            String   @id @default(uuid()) @db.Uuid
  ticker             String   @unique
  postCount          Int
  companyName        String
  coverPhoto         String?  // Optional field, can be null
  positiveSentiment  Int
  marketEnterDate    Int      // Stored as a UNIX timestamp
  stockType          String   // Assuming StockType is a string

  // Many-to-Many Relation with Post
  posts              Post[]   @relation("StockPosts")

  @@index([ticker])
}
